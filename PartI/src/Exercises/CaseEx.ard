\import Basics (*, +, Bool)
\import Case
\import EqualityProofs (+-assoc, +-comm)
\import Exercises.BasicsEx (if)
\import Function.Meta
\import Meta
\import Paths (*>)
\import Paths.Meta

-- 1. Implement any sorting algorithm using \case for pattern matching on the result of comparison of elements
-- of a list.

-- 2. Define 'filter' via 'if' not using \case.
--    Prove the lemma 'filter-lem' for this version of 'filter'.

\func filter' {A : \Type} (p : A -> Bool) (xs : List A) : List A \elim xs
  | nil => nil
  | cons a xs => if (p a) (cons a (filter' p xs)) (filter' p xs)

\func filter-lem {A : \Type} (p : A -> Bool) (xs : List A) : length (filter' p xs) <= length xs \elim xs
  | nil => unit
  | cons a xs => \let IH => filter-lem p xs \in \case p a \as pa \return length (if pa (cons a (filter' p xs)) (filter' p xs)) <= length (cons a xs) \with {
    | false => <=-helper IH
    | true => IH
  }

-- 3. Prove that, for every function f : Bool -> Bool and every x : Bool, it is true that f (f (f x)) = f x.

\func Bool-lem (f : Bool -> Bool) (x : Bool) : f (f (f x)) = f x => {?}

-- 4. Define the view, which represents a natural number as a pair of the quotient and the remainder of
-- division by a positive 'm'. Implement the division function.

\data ModView (m n : Nat)
  | quot-rem (q r : Nat) (t : T (r < m)) (p : n = q * m + r)

\func mod-view (m n : Nat) (t : T (0 < m)) : ModView m n \elim n
  | 0 => quot-rem 0 0 t (inv Lemma2)
  | suc n => \case mod-view m n t \with {
    | quot-rem q1 r1 t1 p => \case totality (suc r1) m \with {
      | LT t1 => quot-rem q1 (suc r1) t1 (pmap suc p)
      | EQ p1 => quot-rem (suc q1) 0 t (pmap suc p *> pmap (+ (q1 * m)) p1 *> inv Lemma3)
      | GT t0 => absurd (Lemma1 t1 t0)
    }
  } \where {
  \data cmpData (m n : Nat) | LT (T (m < n)) | EQ (m = n) | GT (T (n < m))

  \func totality (m n : Nat) : cmpData m n
    | 0, 0 => EQ idp | 0, suc n => LT unit | suc m, 0 => GT unit
    | suc m, suc n => \let IH => totality m n \in \case IH \with {
      | LT t => LT t | EQ p => EQ (pmap suc p) | GT t => GT t
    }

  \func Lemma0 {n : Nat}: T (n < 0) -> Empty | {0} => \lam x => x | {suc n} => \lam x => x

  \func Lemma1 {m n : Nat}: T (m < n) -> (T (n < suc m)) -> Empty
    | {0}, {0} => \lam x y => x
    | {suc m}, {0} => \lam x y => x
    | {0}, {suc n} => \lam x y => Lemma0 y
    | {suc m}, {suc n} => \lam x y => Lemma1 x y

  \func Lemma2 {m : Nat}: 0 * m = 0 | {0} => idp | {suc m} => Lemma2

  \lemma Lemma3 {m n : Nat} : suc m * n = m * n + n \elim n
    | 0 => idp
    | suc n => pmap suc $ later $ rewrite (Lemma3 {m} {n}) (rewrite (+-assoc, +-assoc, +-comm {m} {n}) idp)
}

\func div (n m : Nat) (t : T (0 < m)) : Nat => {?}

-- 5. Prove that the predicate 'isEven' is decidable.

\func isEven (n : Nat) => \Sigma (k : Nat) (n = 2 * k)

\func isEven-dec : DecPred isEven => {?}

-- 6. Prove that if equality of elements of a type 'A' is decidable, then equality of elements if 'List A' is also decidable.

\instance ListEq {A : \Type} (dec : Eq A) : Eq (List A)
  | decideEq => {?}

-- 7. Prove that if equality of elements of a type 'A' is decidable, then every list of elements of 'A' is either empty,
-- consists of repetitions of one element or there exist two different elements in 'A'.

\func repeat {A : \Type} (n : Nat) (a : A) : List A \elim n
  | 0 => nil
  | suc n => cons a (repeat n a)

\data Result (A : \Type) (xs : List A)
  | empty (xs = nil)
  | repeated (n : Nat) (a : A) (p : xs = repeat n a)
  | A-is-not-trivial (a a' : A) (p : a = a' -> Empty)

\func lemma {A : \Type} (xs : List A) {dec : DecEq A} : Result A xs => {?}

-- 8. Prove that the functions 'FromBoolToDec' and 'FromDecToBool' are inverse to each other.

\func bdb {A : \Type} (p : A -> Bool) : FromDecToBool (FromBoolToDec p) = p => {?}

-- We cannot prove that 'FromBoolToDec (FromDecToBool P) = P', but we can prove a weaker statement:
-- these predicates are logically equivalent.

-- Equivalence of predicates
\func \infix 4 <-> {A : \Type} (P Q : A -> \Type) => \Pi (x : A) -> \Sigma (P x -> Q x) (Q x -> P x)

\func dbd {A : \Type} (P : \Sigma (P : A -> \Type) (DecPred P)) : (FromBoolToDec (FromDecToBool P)).1 <-> P.1 => {?}
