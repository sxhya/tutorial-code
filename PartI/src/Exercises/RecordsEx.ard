\import Equality (funExt)
\import EqualityProofs (inv)
\import Exercises.BasicsEx
\import Indexed (pmap)
\import Meta
\import Paths.Meta
\import Records

-- 1. Define the function 'swap' in several ways.

-- Using \cowith and field access.
\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst' => p.snd'
  | snd' => p.fst'

-- Using \new and pattern matching.
\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a, b) => \new Pair {
    | fst' => b
    | snd' => a
  }

-- Using \new and field access.
\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst' => p.snd'
  | snd' => p.fst'
}

-- 2. Prove that 'swap (swap p) = p'.

\func swap-involutive {A B : \Type} (p : Pair A B) : swap (swap p) = p \elim p
  | (a, b) => idp

-- 3. Prove that the type 'PosNat 0' is empty, but the type 'PosNat 1' is not.

\data Empty

\func zero-isNotPos (p : PosNat 0) : Empty => \case p.p

\func one-isPos : PosNat 1 => \new PosNat {
  | p => tt
}

-- 4. Define the \record consisting of pairs of coprime natural numbers.
--    Define the type of natural numbers that are coprime with 60.

\record CoprimePair (m n : Nat) (P : gcd m n = 1)

\func ComprimeWith60 => CoprimePair 60

-- 5. Define the class of monads, which extends the class of functors. Define \instance of this class for 'Maybe'.

\data Maybe (A : \Type) | nothing | just A

\class Monad \extends Functor {
  | return {A : \Type} : A -> Functor.F A
  | \infix 9 >>= {A B : \Type} (Functor.F A) (A -> Functor.F B) : Functor.F B
  | return-left-identity {A B : \Type} (a : A) (f : A -> Functor.F B) : return a >>= f = f a
  | return-right-identity {A : \Type} {ma : Functor.F A} : ma >>= return = ma
  | bind-assoc {A B C : \Type} (ma : Functor.F A) (f : A -> Functor.F B) (g : B -> Functor.F C) :
      ma >>= (\lam x => f x >>= g) = (ma >>= f) >>= g
  | fmap {A} {B} f a' => a' >>= (\lam a => return (f a))
  | fmap-id => \lam y => unfold fmap return-right-identity
  | fmap-comp {A} {B} {C} f g y => unfold fmap (\let X => bind-assoc y (\lam a => return (f a)) (\lam a => return (g a)) \in rewriteI X ( pmap (\lam x => y >>= x)
      (funExt (\lam _ => Functor.F C) (\lam a => inv (return-left-identity (f a) (\lam y => return (g y)))))))
}
\instance MaybeMonad : Monad \cowith
  | F => \lam x => Maybe x
  | return {A} => \lam (a : A) => just {A} a
  | >>= ma f => \case ma \with { nothing => nothing | just a => f a }
  | return-left-identity a f => idp
  | return-right-identity {A} {ma} => \case \elim ma \with { nothing => idp | just a => idp }
  | bind-assoc {A} {B} {C} ma f g => \case \elim ma \with { nothing => idp | just a => idp }

-- 6. Define instances for the class of monads for 'State' and 'State''.

\record State (S A : \Type)
  | state : S -> \Sigma S A

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance StateMonad {S : \Type} : Monad \cowith
  | F A => State S A
  | return a => \new State { | state s => (s, a) }
  | >>= sa f => \new State { | state s => \let (s', v) => state {sa} s | nS => f v \in state {nS} s' }
  | return-left-identity {A} {B} a f => ext (funExt (\lam _ => _) (\lam a1 => idp))
  | return-right-identity {A} {ma} => ext (funExt (\lam _ => _) (\lam a1 => idp))
  | bind-assoc {A} {B} {C} ma f g => ext (funExt (\lam _ => _) (\lam a1 => idp))