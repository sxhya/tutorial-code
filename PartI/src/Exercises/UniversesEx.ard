\import Basics (-)
\import Indexed (Empty, T, unit)
\import Logic (byLeft, byRight, ||)
\import Universes
\import Proofs(absurd)

-- 1. Calculate levels in each of the the invocations of 'id''' below.
--    Specify explicitly result types for all idTest*.

\func id'' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id'' (id'' id)
\func idTest2 : \Type \lp -> \Type \lp => id'' Maybe
\func idTest3 : \Type (\suc \lp) => id'' Functor
\func idTest4 : \Type (\suc \lp) => id'' (Functor Maybe)
\func idTest5 (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id'' (Functor Maybe f)

-- 2. Define 'div' via 'Nat-ind'.

\func T<0=false {l : Nat} (a : T (l < 0)) : Empty | {0}, ()

--\func T-suc {m n : Nat} (p : T (m < suc n)) : T (m < n) || (m = n)

\func Nat-ind (E : Nat -> \Type)
              (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
              (n : Nat) : E n \elim n
  | 0 => r 0 (\lam (k : Nat) (p : T (k < 0)) => absurd (T<0=false p))
  | suc n => {?}

\func div (n k : Nat) (p : T (0 < k)) : Nat => \let NI => Nat-ind (\lam _ => Nat) (\lam k2 f => \let X => f (k2 - k) \in {?}) \in {?}

-- 3. Prove the following induction principle for lists:

\func length {A : \Type} (xs : List A) : Nat
  | nil => 0
  | cons _ xs => suc (length xs)

\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
  (xs : List A) : E xs => {?}

-- 4. Implement function 'filter' and prove that it is correct, that is that the following holds:
--    * 'filter p xs' is a sublist of 'xs'
--    * All elements of 'filter p xs' satisfy the predicate 'p'
--    * Any sublist of 'xs' with this property is a sublist of 'filter p xs'
