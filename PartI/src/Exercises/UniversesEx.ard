\import Basics (-, Bool, true, false)
\import Exercises.EqualityProofsEx (EmptySublist, List, SkipSubList, SubList, TakeSublist, filter, cons, nil)
\import Function.Meta
\import Indexed (<, Empty, T, Unit, if, pmap, unit)
\import Meta
\import Paths (inv, transport)
\import Paths.Meta
\import Universes
\import Proofs (absurd, inl, inr, ||)

-- 1. Calculate levels in each of the the invocations of 'id''' below.
--    Specify explicitly result types for all idTest*.

\func id'' {A : \Type} (a : A) => a

\func idTest1 : \Pi (A : \Type \lp) -> A -> A => id'' (id'' id)

\func idTest2 : \Type \lp -> \Type \lp => id'' Maybe

\func idTest3 : \Type (\suc \lp) => id'' Functor

\func idTest4 : \Type (\suc \lp) => id'' (Functor Maybe)

\func idTest5 (f : \Pi {A B : \Set} -> (A -> B) -> Maybe A -> Maybe B) : \Type \lp => id'' (Functor Maybe f)

-- 2. Define 'div' via 'Nat-ind'.

\func T<0=false {l : Nat} (a : T (l < 0)) : Empty | {0}, ()

\func Nat-ind-helper (E : Nat -> \Type)
                     (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
                     {n k : Nat} (A : T (k < suc n)) : E k \elim n
  | 0 => \case \elim k, A \with {
    | 0, _ => r 0 (\lam k A => absurd (T<0=false A))
    | suc k1, A => absurd (T<0=false A)
  }
  | suc n => \case T-suc A \with {
    | inl p => Nat-ind-helper E r p
    | inr q => transport E (inv q) (r (suc n) (\lam k A => Nat-ind-helper E r A))
  }
  \where {
    \func T-suc {n k : Nat} (A : T (k < suc n)) : T (k < n) Proofs.|| (k = n) \elim n
      | 0 => \case \elim k, A : T (k < 1) \with {
        | 0, unit => Proofs.inr idp
        | suc k, t => absurd (T<0=false t)
      }
      | suc n => \case \elim k, A : T (k < suc (suc n)) \with {
        | 0, A => Proofs.inl unit
        | suc k, A1 => \case T-suc A1 \with {
          | Proofs.inl a => Proofs.inl a
          | Proofs.inr b => Proofs.inr (pmap suc b)
        }
      }
  }

\func Nat-ind (E : Nat -> \Type)
              (r : \Pi (n : Nat) -> (\Pi (k : Nat) -> T (k < n) -> E k) -> E n)
              (n : Nat) : E n => Nat-ind-helper E r n<sucn

\open n-k<n (n<sucn)

\func n-k<n (n k : Nat) (A : T (0 < k)) : T (n - k < n) Proofs.|| (n = 0) \elim n, k
  | 0, suc k => Proofs.inr idp
  | suc n, suc k => Proofs.inl \case \elim k, n-k<n n k \with {
    | 0, _ => transport (\lam x => T (x < suc n)) (inv n-0) n<sucn
    | suc k1, _x => \case _x unit \with {
      | inl p => <-trans p n<sucn
      | inr q => transport (\lam x => T (x - suc k1 < suc x)) (inv q) unit
    }
  } \where {
  \func <-trans {n m k : Nat} (A0 : T (n < m)) (A1 : T (m < k)) : T (n < k)
    | {0}, {0}, {0}, (), A1
    | {0}, {suc m}, {0}, unit, ()
    | {0}, {suc m}, {suc k}, unit, A1 => unit
    | {suc n}, {0}, {0}, (), A1
    | {suc n}, {suc m}, {suc k}, A0, A1 => <-trans A0 A1

  \func n-0 {n : Nat} : n - 0 = n | {0} => idp | {suc n} => idp

  \func n<sucn {n : Nat} : T (n < suc n) | {0} => unit | {suc n} => n<sucn
}

\func div (n k : Nat) (p : T (0 < k)) : Nat => Nat-ind (\lam _ => Nat) (\lam n f => \case n-k<n n k p \with {
  | inl p1 => \case n < k \with {
    | true => 0
    | false => suc (f (n - k) p1)
  }
  | inr q => 0
}) n

-- 3. Prove the following induction principle for lists:

\func length {A : \Type} (xs : List A) : Nat \elim xs
  | nil => 0
  | cons _ xs => suc (length xs)

\func List-ind
  {A : \Type}
  (E : List A -> \Type)
  (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
  (xs : List A) : E xs => List-ind-helper E r {length xs} {xs} n<sucn

\func List-ind-helper {A : \Type} (E : List A -> \Type)
                      (r : \Pi (xs : List A) -> (\Pi (ys : List A) -> T (length ys < length xs) -> E ys) -> E xs)
                      {n : Nat} {ys : List A} (B : T (length ys < suc n)) : E ys \elim n
  | 0 => \case \elim ys, B \with {
    | nil, _ => r nil (\lam k A => absurd (T<0=false A))
    | cons y ys, A => absurd (T<0=false A)
  }
  | suc n => \case ys \as yss, Nat-ind-helper.T-suc B : T (length yss < suc n) || (length yss = suc n) \return E yss \with {
    | ys, inl p => List-ind-helper E r p
    | cons y ys, inr q => r (cons y ys) (\lam zs B => List-ind-helper E r {n} {zs} (transport (\lam x => T (length zs < x)) q B))
    | nil, inr q => \case q
  }

-- 4. Implement function 'filter' and prove that it is correct, that is that the following holds:
--    * 'filter p xs' is a sublist of 'xs'
--    * All elements of 'filter p xs' satisfy the predicate 'p'
--    * Any sublist of 'xs' with this property is a sublist of 'filter p xs'

\func filterIsASublist {A : \Type} {P : A -> Bool} (xs : List A) : SubList (filter P xs) xs \elim xs
  | nil => EmptySublist
  | cons a xs => \case P a \as pa \return SubList (if pa (cons a (filter P xs)) (filter P xs)) (cons a xs) \with {
    | true => TakeSublist idp (filterIsASublist xs)
    | false => SkipSubList (filterIsASublist xs)
  }

\func forall {B : \Type} (P : B -> Bool) (xs : List B) : \Prop \elim xs
  | Exercises.EqualityProofsEx.nil => Unit
  | cons a xs => \Sigma (T (P a)) (forall P xs)

\func filterAreFiltered {A : \Type} {P : A -> Bool} (xs : List A) : forall {A} P (filter P xs) \elim xs
  | nil => unit
  | cons a xs => \case P a \as Pa, idp : P a = Pa \return forall {A} P (if {List A} Pa (cons {A} a (filter {A} P xs)) (filter {A} P xs)) \with {
    | false, _ => filterAreFiltered {A} {P} xs
    | true, A0 => rewrite A0 (unit, filterAreFiltered {A} {P} xs)
  }
\func filteredUniversality {A : \Type} (P : A -> Bool) (xs ys : List A) :
  forall {A} P ys -> SubList ys xs -> SubList ys (filter P xs)
  | P, nil, nil => \lam A B => EmptySublist
  | P, nil, cons a ys => \lam A B => \case B
  | P, cons a xs, nil => \lam A B => EmptySublist
  | P, cons x xs, cons y ys => \lam A B => \case B, P x \as Px, idp : P x = Px \return SubList (cons y ys) (if Px (cons x (filter P xs)) (filter P xs)) \with {
    | SkipSubList s, false, _ => filteredUniversality P xs (cons y ys) A s
    | SkipSubList s, true, C => SkipSubList (filteredUniversality P xs (cons y ys) A s)
    | TakeSublist p s, false, C => rewriteI p at C $ rewrite C at A $ absurd A.1
    | TakeSublist p s, true, _ => TakeSublist p (filteredUniversality P xs ys A.2 s)
  }